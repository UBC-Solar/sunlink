# coding: utf-8

"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TemplateExportByID(object):
    """NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'stack_id': 'str',
        'org_ids': 'list[TemplateExportByIDOrgIDs]',
        'resources': 'list[TemplateExportByIDResources]'
    }

    attribute_map = {
        'stack_id': 'stackID',
        'org_ids': 'orgIDs',
        'resources': 'resources'
    }

    def __init__(self, stack_id=None, org_ids=None, resources=None):  # noqa: E501,D401,D403
        """TemplateExportByID - a model defined in OpenAPI."""  # noqa: E501
        self._stack_id = None
        self._org_ids = None
        self._resources = None
        self.discriminator = None

        if stack_id is not None:
            self.stack_id = stack_id
        if org_ids is not None:
            self.org_ids = org_ids
        if resources is not None:
            self.resources = resources

    @property
    def stack_id(self):
        """Get the stack_id of this TemplateExportByID.

        :return: The stack_id of this TemplateExportByID.
        :rtype: str
        """  # noqa: E501
        return self._stack_id

    @stack_id.setter
    def stack_id(self, stack_id):
        """Set the stack_id of this TemplateExportByID.

        :param stack_id: The stack_id of this TemplateExportByID.
        :type: str
        """  # noqa: E501
        self._stack_id = stack_id

    @property
    def org_ids(self):
        """Get the org_ids of this TemplateExportByID.

        :return: The org_ids of this TemplateExportByID.
        :rtype: list[TemplateExportByIDOrgIDs]
        """  # noqa: E501
        return self._org_ids

    @org_ids.setter
    def org_ids(self, org_ids):
        """Set the org_ids of this TemplateExportByID.

        :param org_ids: The org_ids of this TemplateExportByID.
        :type: list[TemplateExportByIDOrgIDs]
        """  # noqa: E501
        self._org_ids = org_ids

    @property
    def resources(self):
        """Get the resources of this TemplateExportByID.

        :return: The resources of this TemplateExportByID.
        :rtype: list[TemplateExportByIDResources]
        """  # noqa: E501
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Set the resources of this TemplateExportByID.

        :param resources: The resources of this TemplateExportByID.
        :type: list[TemplateExportByIDResources]
        """  # noqa: E501
        self._resources = resources

    def to_dict(self):
        """Return the model properties as a dict."""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Return the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Return true if both objects are equal."""
        if not isinstance(other, TemplateExportByID):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Return true if both objects are not equal."""
        return not self == other
