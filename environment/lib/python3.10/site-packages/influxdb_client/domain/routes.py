# coding: utf-8

"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Routes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'authorizations': 'str',
        'buckets': 'str',
        'dashboards': 'str',
        'external': 'RoutesExternal',
        'variables': 'str',
        'me': 'str',
        'flags': 'str',
        'orgs': 'str',
        'query': 'RoutesQuery',
        'setup': 'str',
        'signin': 'str',
        'signout': 'str',
        'sources': 'str',
        'system': 'RoutesSystem',
        'tasks': 'str',
        'telegrafs': 'str',
        'users': 'str',
        'write': 'str'
    }

    attribute_map = {
        'authorizations': 'authorizations',
        'buckets': 'buckets',
        'dashboards': 'dashboards',
        'external': 'external',
        'variables': 'variables',
        'me': 'me',
        'flags': 'flags',
        'orgs': 'orgs',
        'query': 'query',
        'setup': 'setup',
        'signin': 'signin',
        'signout': 'signout',
        'sources': 'sources',
        'system': 'system',
        'tasks': 'tasks',
        'telegrafs': 'telegrafs',
        'users': 'users',
        'write': 'write'
    }

    def __init__(self, authorizations=None, buckets=None, dashboards=None, external=None, variables=None, me=None, flags=None, orgs=None, query=None, setup=None, signin=None, signout=None, sources=None, system=None, tasks=None, telegrafs=None, users=None, write=None):  # noqa: E501,D401,D403
        """Routes - a model defined in OpenAPI."""  # noqa: E501
        self._authorizations = None
        self._buckets = None
        self._dashboards = None
        self._external = None
        self._variables = None
        self._me = None
        self._flags = None
        self._orgs = None
        self._query = None
        self._setup = None
        self._signin = None
        self._signout = None
        self._sources = None
        self._system = None
        self._tasks = None
        self._telegrafs = None
        self._users = None
        self._write = None
        self.discriminator = None

        if authorizations is not None:
            self.authorizations = authorizations
        if buckets is not None:
            self.buckets = buckets
        if dashboards is not None:
            self.dashboards = dashboards
        if external is not None:
            self.external = external
        if variables is not None:
            self.variables = variables
        if me is not None:
            self.me = me
        if flags is not None:
            self.flags = flags
        if orgs is not None:
            self.orgs = orgs
        if query is not None:
            self.query = query
        if setup is not None:
            self.setup = setup
        if signin is not None:
            self.signin = signin
        if signout is not None:
            self.signout = signout
        if sources is not None:
            self.sources = sources
        if system is not None:
            self.system = system
        if tasks is not None:
            self.tasks = tasks
        if telegrafs is not None:
            self.telegrafs = telegrafs
        if users is not None:
            self.users = users
        if write is not None:
            self.write = write

    @property
    def authorizations(self):
        """Get the authorizations of this Routes.

        :return: The authorizations of this Routes.
        :rtype: str
        """  # noqa: E501
        return self._authorizations

    @authorizations.setter
    def authorizations(self, authorizations):
        """Set the authorizations of this Routes.

        :param authorizations: The authorizations of this Routes.
        :type: str
        """  # noqa: E501
        self._authorizations = authorizations

    @property
    def buckets(self):
        """Get the buckets of this Routes.

        :return: The buckets of this Routes.
        :rtype: str
        """  # noqa: E501
        return self._buckets

    @buckets.setter
    def buckets(self, buckets):
        """Set the buckets of this Routes.

        :param buckets: The buckets of this Routes.
        :type: str
        """  # noqa: E501
        self._buckets = buckets

    @property
    def dashboards(self):
        """Get the dashboards of this Routes.

        :return: The dashboards of this Routes.
        :rtype: str
        """  # noqa: E501
        return self._dashboards

    @dashboards.setter
    def dashboards(self, dashboards):
        """Set the dashboards of this Routes.

        :param dashboards: The dashboards of this Routes.
        :type: str
        """  # noqa: E501
        self._dashboards = dashboards

    @property
    def external(self):
        """Get the external of this Routes.

        :return: The external of this Routes.
        :rtype: RoutesExternal
        """  # noqa: E501
        return self._external

    @external.setter
    def external(self, external):
        """Set the external of this Routes.

        :param external: The external of this Routes.
        :type: RoutesExternal
        """  # noqa: E501
        self._external = external

    @property
    def variables(self):
        """Get the variables of this Routes.

        :return: The variables of this Routes.
        :rtype: str
        """  # noqa: E501
        return self._variables

    @variables.setter
    def variables(self, variables):
        """Set the variables of this Routes.

        :param variables: The variables of this Routes.
        :type: str
        """  # noqa: E501
        self._variables = variables

    @property
    def me(self):
        """Get the me of this Routes.

        :return: The me of this Routes.
        :rtype: str
        """  # noqa: E501
        return self._me

    @me.setter
    def me(self, me):
        """Set the me of this Routes.

        :param me: The me of this Routes.
        :type: str
        """  # noqa: E501
        self._me = me

    @property
    def flags(self):
        """Get the flags of this Routes.

        :return: The flags of this Routes.
        :rtype: str
        """  # noqa: E501
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Set the flags of this Routes.

        :param flags: The flags of this Routes.
        :type: str
        """  # noqa: E501
        self._flags = flags

    @property
    def orgs(self):
        """Get the orgs of this Routes.

        :return: The orgs of this Routes.
        :rtype: str
        """  # noqa: E501
        return self._orgs

    @orgs.setter
    def orgs(self, orgs):
        """Set the orgs of this Routes.

        :param orgs: The orgs of this Routes.
        :type: str
        """  # noqa: E501
        self._orgs = orgs

    @property
    def query(self):
        """Get the query of this Routes.

        :return: The query of this Routes.
        :rtype: RoutesQuery
        """  # noqa: E501
        return self._query

    @query.setter
    def query(self, query):
        """Set the query of this Routes.

        :param query: The query of this Routes.
        :type: RoutesQuery
        """  # noqa: E501
        self._query = query

    @property
    def setup(self):
        """Get the setup of this Routes.

        :return: The setup of this Routes.
        :rtype: str
        """  # noqa: E501
        return self._setup

    @setup.setter
    def setup(self, setup):
        """Set the setup of this Routes.

        :param setup: The setup of this Routes.
        :type: str
        """  # noqa: E501
        self._setup = setup

    @property
    def signin(self):
        """Get the signin of this Routes.

        :return: The signin of this Routes.
        :rtype: str
        """  # noqa: E501
        return self._signin

    @signin.setter
    def signin(self, signin):
        """Set the signin of this Routes.

        :param signin: The signin of this Routes.
        :type: str
        """  # noqa: E501
        self._signin = signin

    @property
    def signout(self):
        """Get the signout of this Routes.

        :return: The signout of this Routes.
        :rtype: str
        """  # noqa: E501
        return self._signout

    @signout.setter
    def signout(self, signout):
        """Set the signout of this Routes.

        :param signout: The signout of this Routes.
        :type: str
        """  # noqa: E501
        self._signout = signout

    @property
    def sources(self):
        """Get the sources of this Routes.

        :return: The sources of this Routes.
        :rtype: str
        """  # noqa: E501
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Set the sources of this Routes.

        :param sources: The sources of this Routes.
        :type: str
        """  # noqa: E501
        self._sources = sources

    @property
    def system(self):
        """Get the system of this Routes.

        :return: The system of this Routes.
        :rtype: RoutesSystem
        """  # noqa: E501
        return self._system

    @system.setter
    def system(self, system):
        """Set the system of this Routes.

        :param system: The system of this Routes.
        :type: RoutesSystem
        """  # noqa: E501
        self._system = system

    @property
    def tasks(self):
        """Get the tasks of this Routes.

        :return: The tasks of this Routes.
        :rtype: str
        """  # noqa: E501
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Set the tasks of this Routes.

        :param tasks: The tasks of this Routes.
        :type: str
        """  # noqa: E501
        self._tasks = tasks

    @property
    def telegrafs(self):
        """Get the telegrafs of this Routes.

        :return: The telegrafs of this Routes.
        :rtype: str
        """  # noqa: E501
        return self._telegrafs

    @telegrafs.setter
    def telegrafs(self, telegrafs):
        """Set the telegrafs of this Routes.

        :param telegrafs: The telegrafs of this Routes.
        :type: str
        """  # noqa: E501
        self._telegrafs = telegrafs

    @property
    def users(self):
        """Get the users of this Routes.

        :return: The users of this Routes.
        :rtype: str
        """  # noqa: E501
        return self._users

    @users.setter
    def users(self, users):
        """Set the users of this Routes.

        :param users: The users of this Routes.
        :type: str
        """  # noqa: E501
        self._users = users

    @property
    def write(self):
        """Get the write of this Routes.

        :return: The write of this Routes.
        :rtype: str
        """  # noqa: E501
        return self._write

    @write.setter
    def write(self, write):
        """Set the write of this Routes.

        :param write: The write of this Routes.
        :type: str
        """  # noqa: E501
        self._write = write

    def to_dict(self):
        """Return the model properties as a dict."""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Return the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Return true if both objects are equal."""
        if not isinstance(other, Routes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Return true if both objects are not equal."""
        return not self == other
