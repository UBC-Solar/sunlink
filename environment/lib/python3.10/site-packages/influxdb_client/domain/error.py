# coding: utf-8

"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Error(object):
    """NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'code': 'str',
        'message': 'str',
        'op': 'str',
        'err': 'str'
    }

    attribute_map = {
        'code': 'code',
        'message': 'message',
        'op': 'op',
        'err': 'err'
    }

    def __init__(self, code=None, message=None, op=None, err=None):  # noqa: E501,D401,D403
        """Error - a model defined in OpenAPI."""  # noqa: E501
        self._code = None
        self._message = None
        self._op = None
        self._err = None
        self.discriminator = None

        self.code = code
        if message is not None:
            self.message = message
        if op is not None:
            self.op = op
        if err is not None:
            self.err = err

    @property
    def code(self):
        """Get the code of this Error.

        code is the machine-readable error code.

        :return: The code of this Error.
        :rtype: str
        """  # noqa: E501
        return self._code

    @code.setter
    def code(self, code):
        """Set the code of this Error.

        code is the machine-readable error code.

        :param code: The code of this Error.
        :type: str
        """  # noqa: E501
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501
        self._code = code

    @property
    def message(self):
        """Get the message of this Error.

        Human-readable message.

        :return: The message of this Error.
        :rtype: str
        """  # noqa: E501
        return self._message

    @message.setter
    def message(self, message):
        """Set the message of this Error.

        Human-readable message.

        :param message: The message of this Error.
        :type: str
        """  # noqa: E501
        self._message = message

    @property
    def op(self):
        """Get the op of this Error.

        Describes the logical code operation when the error occurred. Useful for debugging.

        :return: The op of this Error.
        :rtype: str
        """  # noqa: E501
        return self._op

    @op.setter
    def op(self, op):
        """Set the op of this Error.

        Describes the logical code operation when the error occurred. Useful for debugging.

        :param op: The op of this Error.
        :type: str
        """  # noqa: E501
        self._op = op

    @property
    def err(self):
        """Get the err of this Error.

        Stack of errors that occurred during processing of the request. Useful for debugging.

        :return: The err of this Error.
        :rtype: str
        """  # noqa: E501
        return self._err

    @err.setter
    def err(self, err):
        """Set the err of this Error.

        Stack of errors that occurred during processing of the request. Useful for debugging.

        :param err: The err of this Error.
        :type: str
        """  # noqa: E501
        self._err = err

    def to_dict(self):
        """Return the model properties as a dict."""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Return the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Return true if both objects are equal."""
        if not isinstance(other, Error):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Return true if both objects are not equal."""
        return not self == other
