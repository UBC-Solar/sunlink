# coding: utf-8

"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TelegrafRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'description': 'str',
        'metadata': 'TelegrafRequestMetadata',
        'config': 'str',
        'org_id': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'metadata': 'metadata',
        'config': 'config',
        'org_id': 'orgID'
    }

    def __init__(self, name=None, description=None, metadata=None, config=None, org_id=None):  # noqa: E501,D401,D403
        """TelegrafRequest - a model defined in OpenAPI."""  # noqa: E501
        self._name = None
        self._description = None
        self._metadata = None
        self._config = None
        self._org_id = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if metadata is not None:
            self.metadata = metadata
        if config is not None:
            self.config = config
        if org_id is not None:
            self.org_id = org_id

    @property
    def name(self):
        """Get the name of this TelegrafRequest.

        :return: The name of this TelegrafRequest.
        :rtype: str
        """  # noqa: E501
        return self._name

    @name.setter
    def name(self, name):
        """Set the name of this TelegrafRequest.

        :param name: The name of this TelegrafRequest.
        :type: str
        """  # noqa: E501
        self._name = name

    @property
    def description(self):
        """Get the description of this TelegrafRequest.

        :return: The description of this TelegrafRequest.
        :rtype: str
        """  # noqa: E501
        return self._description

    @description.setter
    def description(self, description):
        """Set the description of this TelegrafRequest.

        :param description: The description of this TelegrafRequest.
        :type: str
        """  # noqa: E501
        self._description = description

    @property
    def metadata(self):
        """Get the metadata of this TelegrafRequest.

        :return: The metadata of this TelegrafRequest.
        :rtype: TelegrafRequestMetadata
        """  # noqa: E501
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Set the metadata of this TelegrafRequest.

        :param metadata: The metadata of this TelegrafRequest.
        :type: TelegrafRequestMetadata
        """  # noqa: E501
        self._metadata = metadata

    @property
    def config(self):
        """Get the config of this TelegrafRequest.

        :return: The config of this TelegrafRequest.
        :rtype: str
        """  # noqa: E501
        return self._config

    @config.setter
    def config(self, config):
        """Set the config of this TelegrafRequest.

        :param config: The config of this TelegrafRequest.
        :type: str
        """  # noqa: E501
        self._config = config

    @property
    def org_id(self):
        """Get the org_id of this TelegrafRequest.

        :return: The org_id of this TelegrafRequest.
        :rtype: str
        """  # noqa: E501
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Set the org_id of this TelegrafRequest.

        :param org_id: The org_id of this TelegrafRequest.
        :type: str
        """  # noqa: E501
        self._org_id = org_id

    def to_dict(self):
        """Return the model properties as a dict."""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Return the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Return true if both objects are equal."""
        if not isinstance(other, TelegrafRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Return true if both objects are not equal."""
        return not self == other
