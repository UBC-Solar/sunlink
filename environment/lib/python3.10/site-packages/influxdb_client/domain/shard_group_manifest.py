# coding: utf-8

"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ShardGroupManifest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'deleted_at': 'datetime',
        'truncated_at': 'datetime',
        'shards': 'list[ShardManifest]'
    }

    attribute_map = {
        'id': 'id',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'deleted_at': 'deletedAt',
        'truncated_at': 'truncatedAt',
        'shards': 'shards'
    }

    def __init__(self, id=None, start_time=None, end_time=None, deleted_at=None, truncated_at=None, shards=None):  # noqa: E501,D401,D403
        """ShardGroupManifest - a model defined in OpenAPI."""  # noqa: E501
        self._id = None
        self._start_time = None
        self._end_time = None
        self._deleted_at = None
        self._truncated_at = None
        self._shards = None
        self.discriminator = None

        self.id = id
        self.start_time = start_time
        self.end_time = end_time
        if deleted_at is not None:
            self.deleted_at = deleted_at
        if truncated_at is not None:
            self.truncated_at = truncated_at
        self.shards = shards

    @property
    def id(self):
        """Get the id of this ShardGroupManifest.

        :return: The id of this ShardGroupManifest.
        :rtype: int
        """  # noqa: E501
        return self._id

    @id.setter
    def id(self, id):
        """Set the id of this ShardGroupManifest.

        :param id: The id of this ShardGroupManifest.
        :type: int
        """  # noqa: E501
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        self._id = id

    @property
    def start_time(self):
        """Get the start_time of this ShardGroupManifest.

        :return: The start_time of this ShardGroupManifest.
        :rtype: datetime
        """  # noqa: E501
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Set the start_time of this ShardGroupManifest.

        :param start_time: The start_time of this ShardGroupManifest.
        :type: datetime
        """  # noqa: E501
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501
        self._start_time = start_time

    @property
    def end_time(self):
        """Get the end_time of this ShardGroupManifest.

        :return: The end_time of this ShardGroupManifest.
        :rtype: datetime
        """  # noqa: E501
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Set the end_time of this ShardGroupManifest.

        :param end_time: The end_time of this ShardGroupManifest.
        :type: datetime
        """  # noqa: E501
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")  # noqa: E501
        self._end_time = end_time

    @property
    def deleted_at(self):
        """Get the deleted_at of this ShardGroupManifest.

        :return: The deleted_at of this ShardGroupManifest.
        :rtype: datetime
        """  # noqa: E501
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Set the deleted_at of this ShardGroupManifest.

        :param deleted_at: The deleted_at of this ShardGroupManifest.
        :type: datetime
        """  # noqa: E501
        self._deleted_at = deleted_at

    @property
    def truncated_at(self):
        """Get the truncated_at of this ShardGroupManifest.

        :return: The truncated_at of this ShardGroupManifest.
        :rtype: datetime
        """  # noqa: E501
        return self._truncated_at

    @truncated_at.setter
    def truncated_at(self, truncated_at):
        """Set the truncated_at of this ShardGroupManifest.

        :param truncated_at: The truncated_at of this ShardGroupManifest.
        :type: datetime
        """  # noqa: E501
        self._truncated_at = truncated_at

    @property
    def shards(self):
        """Get the shards of this ShardGroupManifest.

        :return: The shards of this ShardGroupManifest.
        :rtype: list[ShardManifest]
        """  # noqa: E501
        return self._shards

    @shards.setter
    def shards(self, shards):
        """Set the shards of this ShardGroupManifest.

        :param shards: The shards of this ShardGroupManifest.
        :type: list[ShardManifest]
        """  # noqa: E501
        if shards is None:
            raise ValueError("Invalid value for `shards`, must not be `None`")  # noqa: E501
        self._shards = shards

    def to_dict(self):
        """Return the model properties as a dict."""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Return the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Return true if both objects are equal."""
        if not isinstance(other, ShardGroupManifest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Return true if both objects are not equal."""
        return not self == other
