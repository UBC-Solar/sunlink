# coding: utf-8

"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Variable(object):
    """NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'links': 'VariableLinks',
        'id': 'str',
        'org_id': 'str',
        'name': 'str',
        'description': 'str',
        'selected': 'list[str]',
        'labels': 'list[Label]',
        'arguments': 'VariableProperties',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'links': 'links',
        'id': 'id',
        'org_id': 'orgID',
        'name': 'name',
        'description': 'description',
        'selected': 'selected',
        'labels': 'labels',
        'arguments': 'arguments',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, links=None, id=None, org_id=None, name=None, description=None, selected=None, labels=None, arguments=None, created_at=None, updated_at=None):  # noqa: E501,D401,D403
        """Variable - a model defined in OpenAPI."""  # noqa: E501
        self._links = None
        self._id = None
        self._org_id = None
        self._name = None
        self._description = None
        self._selected = None
        self._labels = None
        self._arguments = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if links is not None:
            self.links = links
        if id is not None:
            self.id = id
        self.org_id = org_id
        self.name = name
        if description is not None:
            self.description = description
        if selected is not None:
            self.selected = selected
        if labels is not None:
            self.labels = labels
        self.arguments = arguments
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def links(self):
        """Get the links of this Variable.

        :return: The links of this Variable.
        :rtype: VariableLinks
        """  # noqa: E501
        return self._links

    @links.setter
    def links(self, links):
        """Set the links of this Variable.

        :param links: The links of this Variable.
        :type: VariableLinks
        """  # noqa: E501
        self._links = links

    @property
    def id(self):
        """Get the id of this Variable.

        :return: The id of this Variable.
        :rtype: str
        """  # noqa: E501
        return self._id

    @id.setter
    def id(self, id):
        """Set the id of this Variable.

        :param id: The id of this Variable.
        :type: str
        """  # noqa: E501
        self._id = id

    @property
    def org_id(self):
        """Get the org_id of this Variable.

        :return: The org_id of this Variable.
        :rtype: str
        """  # noqa: E501
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Set the org_id of this Variable.

        :param org_id: The org_id of this Variable.
        :type: str
        """  # noqa: E501
        if org_id is None:
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501
        self._org_id = org_id

    @property
    def name(self):
        """Get the name of this Variable.

        :return: The name of this Variable.
        :rtype: str
        """  # noqa: E501
        return self._name

    @name.setter
    def name(self, name):
        """Set the name of this Variable.

        :param name: The name of this Variable.
        :type: str
        """  # noqa: E501
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        self._name = name

    @property
    def description(self):
        """Get the description of this Variable.

        :return: The description of this Variable.
        :rtype: str
        """  # noqa: E501
        return self._description

    @description.setter
    def description(self, description):
        """Set the description of this Variable.

        :param description: The description of this Variable.
        :type: str
        """  # noqa: E501
        self._description = description

    @property
    def selected(self):
        """Get the selected of this Variable.

        :return: The selected of this Variable.
        :rtype: list[str]
        """  # noqa: E501
        return self._selected

    @selected.setter
    def selected(self, selected):
        """Set the selected of this Variable.

        :param selected: The selected of this Variable.
        :type: list[str]
        """  # noqa: E501
        self._selected = selected

    @property
    def labels(self):
        """Get the labels of this Variable.

        :return: The labels of this Variable.
        :rtype: list[Label]
        """  # noqa: E501
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Set the labels of this Variable.

        :param labels: The labels of this Variable.
        :type: list[Label]
        """  # noqa: E501
        self._labels = labels

    @property
    def arguments(self):
        """Get the arguments of this Variable.

        :return: The arguments of this Variable.
        :rtype: VariableProperties
        """  # noqa: E501
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Set the arguments of this Variable.

        :param arguments: The arguments of this Variable.
        :type: VariableProperties
        """  # noqa: E501
        if arguments is None:
            raise ValueError("Invalid value for `arguments`, must not be `None`")  # noqa: E501
        self._arguments = arguments

    @property
    def created_at(self):
        """Get the created_at of this Variable.

        :return: The created_at of this Variable.
        :rtype: datetime
        """  # noqa: E501
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Set the created_at of this Variable.

        :param created_at: The created_at of this Variable.
        :type: datetime
        """  # noqa: E501
        self._created_at = created_at

    @property
    def updated_at(self):
        """Get the updated_at of this Variable.

        :return: The updated_at of this Variable.
        :rtype: datetime
        """  # noqa: E501
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Set the updated_at of this Variable.

        :param updated_at: The updated_at of this Variable.
        :type: datetime
        """  # noqa: E501
        self._updated_at = updated_at

    def to_dict(self):
        """Return the model properties as a dict."""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Return the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Return true if both objects are equal."""
        if not isinstance(other, Variable):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Return true if both objects are not equal."""
        return not self == other
