# coding: utf-8

"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TemplateSummarySummaryLabelMappings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'status': 'str',
        'resource_template_meta_name': 'str',
        'resource_name': 'str',
        'resource_id': 'str',
        'resource_type': 'str',
        'label_template_meta_name': 'str',
        'label_name': 'str',
        'label_id': 'str'
    }

    attribute_map = {
        'status': 'status',
        'resource_template_meta_name': 'resourceTemplateMetaName',
        'resource_name': 'resourceName',
        'resource_id': 'resourceID',
        'resource_type': 'resourceType',
        'label_template_meta_name': 'labelTemplateMetaName',
        'label_name': 'labelName',
        'label_id': 'labelID'
    }

    def __init__(self, status=None, resource_template_meta_name=None, resource_name=None, resource_id=None, resource_type=None, label_template_meta_name=None, label_name=None, label_id=None):  # noqa: E501,D401,D403
        """TemplateSummarySummaryLabelMappings - a model defined in OpenAPI."""  # noqa: E501
        self._status = None
        self._resource_template_meta_name = None
        self._resource_name = None
        self._resource_id = None
        self._resource_type = None
        self._label_template_meta_name = None
        self._label_name = None
        self._label_id = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if resource_template_meta_name is not None:
            self.resource_template_meta_name = resource_template_meta_name
        if resource_name is not None:
            self.resource_name = resource_name
        if resource_id is not None:
            self.resource_id = resource_id
        if resource_type is not None:
            self.resource_type = resource_type
        if label_template_meta_name is not None:
            self.label_template_meta_name = label_template_meta_name
        if label_name is not None:
            self.label_name = label_name
        if label_id is not None:
            self.label_id = label_id

    @property
    def status(self):
        """Get the status of this TemplateSummarySummaryLabelMappings.

        :return: The status of this TemplateSummarySummaryLabelMappings.
        :rtype: str
        """  # noqa: E501
        return self._status

    @status.setter
    def status(self, status):
        """Set the status of this TemplateSummarySummaryLabelMappings.

        :param status: The status of this TemplateSummarySummaryLabelMappings.
        :type: str
        """  # noqa: E501
        self._status = status

    @property
    def resource_template_meta_name(self):
        """Get the resource_template_meta_name of this TemplateSummarySummaryLabelMappings.

        :return: The resource_template_meta_name of this TemplateSummarySummaryLabelMappings.
        :rtype: str
        """  # noqa: E501
        return self._resource_template_meta_name

    @resource_template_meta_name.setter
    def resource_template_meta_name(self, resource_template_meta_name):
        """Set the resource_template_meta_name of this TemplateSummarySummaryLabelMappings.

        :param resource_template_meta_name: The resource_template_meta_name of this TemplateSummarySummaryLabelMappings.
        :type: str
        """  # noqa: E501
        self._resource_template_meta_name = resource_template_meta_name

    @property
    def resource_name(self):
        """Get the resource_name of this TemplateSummarySummaryLabelMappings.

        :return: The resource_name of this TemplateSummarySummaryLabelMappings.
        :rtype: str
        """  # noqa: E501
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Set the resource_name of this TemplateSummarySummaryLabelMappings.

        :param resource_name: The resource_name of this TemplateSummarySummaryLabelMappings.
        :type: str
        """  # noqa: E501
        self._resource_name = resource_name

    @property
    def resource_id(self):
        """Get the resource_id of this TemplateSummarySummaryLabelMappings.

        :return: The resource_id of this TemplateSummarySummaryLabelMappings.
        :rtype: str
        """  # noqa: E501
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Set the resource_id of this TemplateSummarySummaryLabelMappings.

        :param resource_id: The resource_id of this TemplateSummarySummaryLabelMappings.
        :type: str
        """  # noqa: E501
        self._resource_id = resource_id

    @property
    def resource_type(self):
        """Get the resource_type of this TemplateSummarySummaryLabelMappings.

        :return: The resource_type of this TemplateSummarySummaryLabelMappings.
        :rtype: str
        """  # noqa: E501
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Set the resource_type of this TemplateSummarySummaryLabelMappings.

        :param resource_type: The resource_type of this TemplateSummarySummaryLabelMappings.
        :type: str
        """  # noqa: E501
        self._resource_type = resource_type

    @property
    def label_template_meta_name(self):
        """Get the label_template_meta_name of this TemplateSummarySummaryLabelMappings.

        :return: The label_template_meta_name of this TemplateSummarySummaryLabelMappings.
        :rtype: str
        """  # noqa: E501
        return self._label_template_meta_name

    @label_template_meta_name.setter
    def label_template_meta_name(self, label_template_meta_name):
        """Set the label_template_meta_name of this TemplateSummarySummaryLabelMappings.

        :param label_template_meta_name: The label_template_meta_name of this TemplateSummarySummaryLabelMappings.
        :type: str
        """  # noqa: E501
        self._label_template_meta_name = label_template_meta_name

    @property
    def label_name(self):
        """Get the label_name of this TemplateSummarySummaryLabelMappings.

        :return: The label_name of this TemplateSummarySummaryLabelMappings.
        :rtype: str
        """  # noqa: E501
        return self._label_name

    @label_name.setter
    def label_name(self, label_name):
        """Set the label_name of this TemplateSummarySummaryLabelMappings.

        :param label_name: The label_name of this TemplateSummarySummaryLabelMappings.
        :type: str
        """  # noqa: E501
        self._label_name = label_name

    @property
    def label_id(self):
        """Get the label_id of this TemplateSummarySummaryLabelMappings.

        :return: The label_id of this TemplateSummarySummaryLabelMappings.
        :rtype: str
        """  # noqa: E501
        return self._label_id

    @label_id.setter
    def label_id(self, label_id):
        """Set the label_id of this TemplateSummarySummaryLabelMappings.

        :param label_id: The label_id of this TemplateSummarySummaryLabelMappings.
        :type: str
        """  # noqa: E501
        self._label_id = label_id

    def to_dict(self):
        """Return the model properties as a dict."""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Return the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Return true if both objects are equal."""
        if not isinstance(other, TemplateSummarySummaryLabelMappings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Return true if both objects are not equal."""
        return not self == other
