# coding: utf-8

"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from influxdb_client.domain.create_dashboard_request import CreateDashboardRequest


class DashboardWithViewProperties(CreateDashboardRequest):
    """NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'links': 'object',
        'id': 'str',
        'meta': 'object',
        'cells': 'list[CellWithViewProperties]',
        'labels': 'list[Label]',
        'org_id': 'str',
        'name': 'str',
        'description': 'str'
    }

    attribute_map = {
        'links': 'links',
        'id': 'id',
        'meta': 'meta',
        'cells': 'cells',
        'labels': 'labels',
        'org_id': 'orgID',
        'name': 'name',
        'description': 'description'
    }

    def __init__(self, links=None, id=None, meta=None, cells=None, labels=None, org_id=None, name=None, description=None):  # noqa: E501,D401,D403
        """DashboardWithViewProperties - a model defined in OpenAPI."""  # noqa: E501
        CreateDashboardRequest.__init__(self, org_id=org_id, name=name, description=description)  # noqa: E501

        self._links = None
        self._id = None
        self._meta = None
        self._cells = None
        self._labels = None
        self.discriminator = None

        if links is not None:
            self.links = links
        if id is not None:
            self.id = id
        if meta is not None:
            self.meta = meta
        if cells is not None:
            self.cells = cells
        if labels is not None:
            self.labels = labels

    @property
    def links(self):
        """Get the links of this DashboardWithViewProperties.

        :return: The links of this DashboardWithViewProperties.
        :rtype: object
        """  # noqa: E501
        return self._links

    @links.setter
    def links(self, links):
        """Set the links of this DashboardWithViewProperties.

        :param links: The links of this DashboardWithViewProperties.
        :type: object
        """  # noqa: E501
        self._links = links

    @property
    def id(self):
        """Get the id of this DashboardWithViewProperties.

        :return: The id of this DashboardWithViewProperties.
        :rtype: str
        """  # noqa: E501
        return self._id

    @id.setter
    def id(self, id):
        """Set the id of this DashboardWithViewProperties.

        :param id: The id of this DashboardWithViewProperties.
        :type: str
        """  # noqa: E501
        self._id = id

    @property
    def meta(self):
        """Get the meta of this DashboardWithViewProperties.

        :return: The meta of this DashboardWithViewProperties.
        :rtype: object
        """  # noqa: E501
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Set the meta of this DashboardWithViewProperties.

        :param meta: The meta of this DashboardWithViewProperties.
        :type: object
        """  # noqa: E501
        self._meta = meta

    @property
    def cells(self):
        """Get the cells of this DashboardWithViewProperties.

        :return: The cells of this DashboardWithViewProperties.
        :rtype: list[CellWithViewProperties]
        """  # noqa: E501
        return self._cells

    @cells.setter
    def cells(self, cells):
        """Set the cells of this DashboardWithViewProperties.

        :param cells: The cells of this DashboardWithViewProperties.
        :type: list[CellWithViewProperties]
        """  # noqa: E501
        self._cells = cells

    @property
    def labels(self):
        """Get the labels of this DashboardWithViewProperties.

        :return: The labels of this DashboardWithViewProperties.
        :rtype: list[Label]
        """  # noqa: E501
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Set the labels of this DashboardWithViewProperties.

        :param labels: The labels of this DashboardWithViewProperties.
        :type: list[Label]
        """  # noqa: E501
        self._labels = labels

    def to_dict(self):
        """Return the model properties as a dict."""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Return the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Return true if both objects are equal."""
        if not isinstance(other, DashboardWithViewProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Return true if both objects are not equal."""
        return not self == other
