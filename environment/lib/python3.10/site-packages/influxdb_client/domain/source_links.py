# coding: utf-8

"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SourceLinks(object):
    """NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_self': 'str',
        'query': 'str',
        'health': 'str',
        'buckets': 'str'
    }

    attribute_map = {
        '_self': 'self',
        'query': 'query',
        'health': 'health',
        'buckets': 'buckets'
    }

    def __init__(self, _self=None, query=None, health=None, buckets=None):  # noqa: E501,D401,D403
        """SourceLinks - a model defined in OpenAPI."""  # noqa: E501
        self.__self = None
        self._query = None
        self._health = None
        self._buckets = None
        self.discriminator = None

        if _self is not None:
            self._self = _self
        if query is not None:
            self.query = query
        if health is not None:
            self.health = health
        if buckets is not None:
            self.buckets = buckets

    @property
    def _self(self):
        """Get the _self of this SourceLinks.

        :return: The _self of this SourceLinks.
        :rtype: str
        """  # noqa: E501
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Set the _self of this SourceLinks.

        :param _self: The _self of this SourceLinks.
        :type: str
        """  # noqa: E501
        self.__self = _self

    @property
    def query(self):
        """Get the query of this SourceLinks.

        :return: The query of this SourceLinks.
        :rtype: str
        """  # noqa: E501
        return self._query

    @query.setter
    def query(self, query):
        """Set the query of this SourceLinks.

        :param query: The query of this SourceLinks.
        :type: str
        """  # noqa: E501
        self._query = query

    @property
    def health(self):
        """Get the health of this SourceLinks.

        :return: The health of this SourceLinks.
        :rtype: str
        """  # noqa: E501
        return self._health

    @health.setter
    def health(self, health):
        """Set the health of this SourceLinks.

        :param health: The health of this SourceLinks.
        :type: str
        """  # noqa: E501
        self._health = health

    @property
    def buckets(self):
        """Get the buckets of this SourceLinks.

        :return: The buckets of this SourceLinks.
        :rtype: str
        """  # noqa: E501
        return self._buckets

    @buckets.setter
    def buckets(self, buckets):
        """Set the buckets of this SourceLinks.

        :param buckets: The buckets of this SourceLinks.
        :type: str
        """  # noqa: E501
        self._buckets = buckets

    def to_dict(self):
        """Return the model properties as a dict."""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Return the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Return true if both objects are equal."""
        if not isinstance(other, SourceLinks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Return true if both objects are not equal."""
        return not self == other
