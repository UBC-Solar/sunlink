# coding: utf-8

"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from influxdb_client.domain.view_properties import ViewProperties


class CheckViewProperties(ViewProperties):
    """NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'shape': 'str',
        'check_id': 'str',
        'check': 'Check',
        'queries': 'list[DashboardQuery]',
        'colors': 'list[DashboardColor]',
        'legend_colorize_rows': 'bool',
        'legend_hide': 'bool',
        'legend_opacity': 'float',
        'legend_orientation_threshold': 'int'
    }

    attribute_map = {
        'type': 'type',
        'shape': 'shape',
        'check_id': 'checkID',
        'check': 'check',
        'queries': 'queries',
        'colors': 'colors',
        'legend_colorize_rows': 'legendColorizeRows',
        'legend_hide': 'legendHide',
        'legend_opacity': 'legendOpacity',
        'legend_orientation_threshold': 'legendOrientationThreshold'
    }

    def __init__(self, type=None, shape=None, check_id=None, check=None, queries=None, colors=None, legend_colorize_rows=None, legend_hide=None, legend_opacity=None, legend_orientation_threshold=None):  # noqa: E501,D401,D403
        """CheckViewProperties - a model defined in OpenAPI."""  # noqa: E501
        ViewProperties.__init__(self)  # noqa: E501

        self._type = None
        self._shape = None
        self._check_id = None
        self._check = None
        self._queries = None
        self._colors = None
        self._legend_colorize_rows = None
        self._legend_hide = None
        self._legend_opacity = None
        self._legend_orientation_threshold = None
        self.discriminator = None

        self.type = type
        self.shape = shape
        self.check_id = check_id
        if check is not None:
            self.check = check
        self.queries = queries
        self.colors = colors
        if legend_colorize_rows is not None:
            self.legend_colorize_rows = legend_colorize_rows
        if legend_hide is not None:
            self.legend_hide = legend_hide
        if legend_opacity is not None:
            self.legend_opacity = legend_opacity
        if legend_orientation_threshold is not None:
            self.legend_orientation_threshold = legend_orientation_threshold

    @property
    def type(self):
        """Get the type of this CheckViewProperties.

        :return: The type of this CheckViewProperties.
        :rtype: str
        """  # noqa: E501
        return self._type

    @type.setter
    def type(self, type):
        """Set the type of this CheckViewProperties.

        :param type: The type of this CheckViewProperties.
        :type: str
        """  # noqa: E501
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        self._type = type

    @property
    def shape(self):
        """Get the shape of this CheckViewProperties.

        :return: The shape of this CheckViewProperties.
        :rtype: str
        """  # noqa: E501
        return self._shape

    @shape.setter
    def shape(self, shape):
        """Set the shape of this CheckViewProperties.

        :param shape: The shape of this CheckViewProperties.
        :type: str
        """  # noqa: E501
        if shape is None:
            raise ValueError("Invalid value for `shape`, must not be `None`")  # noqa: E501
        self._shape = shape

    @property
    def check_id(self):
        """Get the check_id of this CheckViewProperties.

        :return: The check_id of this CheckViewProperties.
        :rtype: str
        """  # noqa: E501
        return self._check_id

    @check_id.setter
    def check_id(self, check_id):
        """Set the check_id of this CheckViewProperties.

        :param check_id: The check_id of this CheckViewProperties.
        :type: str
        """  # noqa: E501
        if check_id is None:
            raise ValueError("Invalid value for `check_id`, must not be `None`")  # noqa: E501
        self._check_id = check_id

    @property
    def check(self):
        """Get the check of this CheckViewProperties.

        :return: The check of this CheckViewProperties.
        :rtype: Check
        """  # noqa: E501
        return self._check

    @check.setter
    def check(self, check):
        """Set the check of this CheckViewProperties.

        :param check: The check of this CheckViewProperties.
        :type: Check
        """  # noqa: E501
        self._check = check

    @property
    def queries(self):
        """Get the queries of this CheckViewProperties.

        :return: The queries of this CheckViewProperties.
        :rtype: list[DashboardQuery]
        """  # noqa: E501
        return self._queries

    @queries.setter
    def queries(self, queries):
        """Set the queries of this CheckViewProperties.

        :param queries: The queries of this CheckViewProperties.
        :type: list[DashboardQuery]
        """  # noqa: E501
        if queries is None:
            raise ValueError("Invalid value for `queries`, must not be `None`")  # noqa: E501
        self._queries = queries

    @property
    def colors(self):
        """Get the colors of this CheckViewProperties.

        Colors define color encoding of data into a visualization

        :return: The colors of this CheckViewProperties.
        :rtype: list[DashboardColor]
        """  # noqa: E501
        return self._colors

    @colors.setter
    def colors(self, colors):
        """Set the colors of this CheckViewProperties.

        Colors define color encoding of data into a visualization

        :param colors: The colors of this CheckViewProperties.
        :type: list[DashboardColor]
        """  # noqa: E501
        if colors is None:
            raise ValueError("Invalid value for `colors`, must not be `None`")  # noqa: E501
        self._colors = colors

    @property
    def legend_colorize_rows(self):
        """Get the legend_colorize_rows of this CheckViewProperties.

        :return: The legend_colorize_rows of this CheckViewProperties.
        :rtype: bool
        """  # noqa: E501
        return self._legend_colorize_rows

    @legend_colorize_rows.setter
    def legend_colorize_rows(self, legend_colorize_rows):
        """Set the legend_colorize_rows of this CheckViewProperties.

        :param legend_colorize_rows: The legend_colorize_rows of this CheckViewProperties.
        :type: bool
        """  # noqa: E501
        self._legend_colorize_rows = legend_colorize_rows

    @property
    def legend_hide(self):
        """Get the legend_hide of this CheckViewProperties.

        :return: The legend_hide of this CheckViewProperties.
        :rtype: bool
        """  # noqa: E501
        return self._legend_hide

    @legend_hide.setter
    def legend_hide(self, legend_hide):
        """Set the legend_hide of this CheckViewProperties.

        :param legend_hide: The legend_hide of this CheckViewProperties.
        :type: bool
        """  # noqa: E501
        self._legend_hide = legend_hide

    @property
    def legend_opacity(self):
        """Get the legend_opacity of this CheckViewProperties.

        :return: The legend_opacity of this CheckViewProperties.
        :rtype: float
        """  # noqa: E501
        return self._legend_opacity

    @legend_opacity.setter
    def legend_opacity(self, legend_opacity):
        """Set the legend_opacity of this CheckViewProperties.

        :param legend_opacity: The legend_opacity of this CheckViewProperties.
        :type: float
        """  # noqa: E501
        self._legend_opacity = legend_opacity

    @property
    def legend_orientation_threshold(self):
        """Get the legend_orientation_threshold of this CheckViewProperties.

        :return: The legend_orientation_threshold of this CheckViewProperties.
        :rtype: int
        """  # noqa: E501
        return self._legend_orientation_threshold

    @legend_orientation_threshold.setter
    def legend_orientation_threshold(self, legend_orientation_threshold):
        """Set the legend_orientation_threshold of this CheckViewProperties.

        :param legend_orientation_threshold: The legend_orientation_threshold of this CheckViewProperties.
        :type: int
        """  # noqa: E501
        self._legend_orientation_threshold = legend_orientation_threshold

    def to_dict(self):
        """Return the model properties as a dict."""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Return the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Return true if both objects are equal."""
        if not isinstance(other, CheckViewProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Return true if both objects are not equal."""
        return not self == other
