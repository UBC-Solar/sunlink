# coding: utf-8

"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class RetentionPolicyManifest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'replica_n': 'int',
        'duration': 'int',
        'shard_group_duration': 'int',
        'shard_groups': 'list[ShardGroupManifest]',
        'subscriptions': 'list[SubscriptionManifest]'
    }

    attribute_map = {
        'name': 'name',
        'replica_n': 'replicaN',
        'duration': 'duration',
        'shard_group_duration': 'shardGroupDuration',
        'shard_groups': 'shardGroups',
        'subscriptions': 'subscriptions'
    }

    def __init__(self, name=None, replica_n=None, duration=None, shard_group_duration=None, shard_groups=None, subscriptions=None):  # noqa: E501,D401,D403
        """RetentionPolicyManifest - a model defined in OpenAPI."""  # noqa: E501
        self._name = None
        self._replica_n = None
        self._duration = None
        self._shard_group_duration = None
        self._shard_groups = None
        self._subscriptions = None
        self.discriminator = None

        self.name = name
        self.replica_n = replica_n
        self.duration = duration
        self.shard_group_duration = shard_group_duration
        self.shard_groups = shard_groups
        self.subscriptions = subscriptions

    @property
    def name(self):
        """Get the name of this RetentionPolicyManifest.

        :return: The name of this RetentionPolicyManifest.
        :rtype: str
        """  # noqa: E501
        return self._name

    @name.setter
    def name(self, name):
        """Set the name of this RetentionPolicyManifest.

        :param name: The name of this RetentionPolicyManifest.
        :type: str
        """  # noqa: E501
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        self._name = name

    @property
    def replica_n(self):
        """Get the replica_n of this RetentionPolicyManifest.

        :return: The replica_n of this RetentionPolicyManifest.
        :rtype: int
        """  # noqa: E501
        return self._replica_n

    @replica_n.setter
    def replica_n(self, replica_n):
        """Set the replica_n of this RetentionPolicyManifest.

        :param replica_n: The replica_n of this RetentionPolicyManifest.
        :type: int
        """  # noqa: E501
        if replica_n is None:
            raise ValueError("Invalid value for `replica_n`, must not be `None`")  # noqa: E501
        self._replica_n = replica_n

    @property
    def duration(self):
        """Get the duration of this RetentionPolicyManifest.

        :return: The duration of this RetentionPolicyManifest.
        :rtype: int
        """  # noqa: E501
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Set the duration of this RetentionPolicyManifest.

        :param duration: The duration of this RetentionPolicyManifest.
        :type: int
        """  # noqa: E501
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501
        self._duration = duration

    @property
    def shard_group_duration(self):
        """Get the shard_group_duration of this RetentionPolicyManifest.

        :return: The shard_group_duration of this RetentionPolicyManifest.
        :rtype: int
        """  # noqa: E501
        return self._shard_group_duration

    @shard_group_duration.setter
    def shard_group_duration(self, shard_group_duration):
        """Set the shard_group_duration of this RetentionPolicyManifest.

        :param shard_group_duration: The shard_group_duration of this RetentionPolicyManifest.
        :type: int
        """  # noqa: E501
        if shard_group_duration is None:
            raise ValueError("Invalid value for `shard_group_duration`, must not be `None`")  # noqa: E501
        self._shard_group_duration = shard_group_duration

    @property
    def shard_groups(self):
        """Get the shard_groups of this RetentionPolicyManifest.

        :return: The shard_groups of this RetentionPolicyManifest.
        :rtype: list[ShardGroupManifest]
        """  # noqa: E501
        return self._shard_groups

    @shard_groups.setter
    def shard_groups(self, shard_groups):
        """Set the shard_groups of this RetentionPolicyManifest.

        :param shard_groups: The shard_groups of this RetentionPolicyManifest.
        :type: list[ShardGroupManifest]
        """  # noqa: E501
        if shard_groups is None:
            raise ValueError("Invalid value for `shard_groups`, must not be `None`")  # noqa: E501
        self._shard_groups = shard_groups

    @property
    def subscriptions(self):
        """Get the subscriptions of this RetentionPolicyManifest.

        :return: The subscriptions of this RetentionPolicyManifest.
        :rtype: list[SubscriptionManifest]
        """  # noqa: E501
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """Set the subscriptions of this RetentionPolicyManifest.

        :param subscriptions: The subscriptions of this RetentionPolicyManifest.
        :type: list[SubscriptionManifest]
        """  # noqa: E501
        if subscriptions is None:
            raise ValueError("Invalid value for `subscriptions`, must not be `None`")  # noqa: E501
        self._subscriptions = subscriptions

    def to_dict(self):
        """Return the model properties as a dict."""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Return the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Return true if both objects are equal."""
        if not isinstance(other, RetentionPolicyManifest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Return true if both objects are not equal."""
        return not self == other
