# coding: utf-8

"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TemplateChart(object):
    """NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'x_pos': 'int',
        'y_pos': 'int',
        'height': 'int',
        'width': 'int',
        'properties': 'ViewProperties'
    }

    attribute_map = {
        'x_pos': 'xPos',
        'y_pos': 'yPos',
        'height': 'height',
        'width': 'width',
        'properties': 'properties'
    }

    def __init__(self, x_pos=None, y_pos=None, height=None, width=None, properties=None):  # noqa: E501,D401,D403
        """TemplateChart - a model defined in OpenAPI."""  # noqa: E501
        self._x_pos = None
        self._y_pos = None
        self._height = None
        self._width = None
        self._properties = None
        self.discriminator = None

        if x_pos is not None:
            self.x_pos = x_pos
        if y_pos is not None:
            self.y_pos = y_pos
        if height is not None:
            self.height = height
        if width is not None:
            self.width = width
        if properties is not None:
            self.properties = properties

    @property
    def x_pos(self):
        """Get the x_pos of this TemplateChart.

        :return: The x_pos of this TemplateChart.
        :rtype: int
        """  # noqa: E501
        return self._x_pos

    @x_pos.setter
    def x_pos(self, x_pos):
        """Set the x_pos of this TemplateChart.

        :param x_pos: The x_pos of this TemplateChart.
        :type: int
        """  # noqa: E501
        self._x_pos = x_pos

    @property
    def y_pos(self):
        """Get the y_pos of this TemplateChart.

        :return: The y_pos of this TemplateChart.
        :rtype: int
        """  # noqa: E501
        return self._y_pos

    @y_pos.setter
    def y_pos(self, y_pos):
        """Set the y_pos of this TemplateChart.

        :param y_pos: The y_pos of this TemplateChart.
        :type: int
        """  # noqa: E501
        self._y_pos = y_pos

    @property
    def height(self):
        """Get the height of this TemplateChart.

        :return: The height of this TemplateChart.
        :rtype: int
        """  # noqa: E501
        return self._height

    @height.setter
    def height(self, height):
        """Set the height of this TemplateChart.

        :param height: The height of this TemplateChart.
        :type: int
        """  # noqa: E501
        self._height = height

    @property
    def width(self):
        """Get the width of this TemplateChart.

        :return: The width of this TemplateChart.
        :rtype: int
        """  # noqa: E501
        return self._width

    @width.setter
    def width(self, width):
        """Set the width of this TemplateChart.

        :param width: The width of this TemplateChart.
        :type: int
        """  # noqa: E501
        self._width = width

    @property
    def properties(self):
        """Get the properties of this TemplateChart.

        :return: The properties of this TemplateChart.
        :rtype: ViewProperties
        """  # noqa: E501
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Set the properties of this TemplateChart.

        :param properties: The properties of this TemplateChart.
        :type: ViewProperties
        """  # noqa: E501
        self._properties = properties

    def to_dict(self):
        """Return the model properties as a dict."""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Return the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Return true if both objects are equal."""
        if not isinstance(other, TemplateChart):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Return true if both objects are not equal."""
        return not self == other
