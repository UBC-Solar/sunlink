# coding: utf-8

"""
InfluxDB OSS API Service.

The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.   # noqa: E501

OpenAPI spec version: 2.0.0
Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class StackEvents(object):
    """NOTE: This class is auto generated by OpenAPI Generator.

    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'event_type': 'str',
        'name': 'str',
        'description': 'str',
        'sources': 'list[str]',
        'resources': 'list[StackResources]',
        'urls': 'list[str]',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'event_type': 'eventType',
        'name': 'name',
        'description': 'description',
        'sources': 'sources',
        'resources': 'resources',
        'urls': 'urls',
        'updated_at': 'updatedAt'
    }

    def __init__(self, event_type=None, name=None, description=None, sources=None, resources=None, urls=None, updated_at=None):  # noqa: E501,D401,D403
        """StackEvents - a model defined in OpenAPI."""  # noqa: E501
        self._event_type = None
        self._name = None
        self._description = None
        self._sources = None
        self._resources = None
        self._urls = None
        self._updated_at = None
        self.discriminator = None

        if event_type is not None:
            self.event_type = event_type
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if sources is not None:
            self.sources = sources
        if resources is not None:
            self.resources = resources
        if urls is not None:
            self.urls = urls
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def event_type(self):
        """Get the event_type of this StackEvents.

        :return: The event_type of this StackEvents.
        :rtype: str
        """  # noqa: E501
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Set the event_type of this StackEvents.

        :param event_type: The event_type of this StackEvents.
        :type: str
        """  # noqa: E501
        self._event_type = event_type

    @property
    def name(self):
        """Get the name of this StackEvents.

        :return: The name of this StackEvents.
        :rtype: str
        """  # noqa: E501
        return self._name

    @name.setter
    def name(self, name):
        """Set the name of this StackEvents.

        :param name: The name of this StackEvents.
        :type: str
        """  # noqa: E501
        self._name = name

    @property
    def description(self):
        """Get the description of this StackEvents.

        :return: The description of this StackEvents.
        :rtype: str
        """  # noqa: E501
        return self._description

    @description.setter
    def description(self, description):
        """Set the description of this StackEvents.

        :param description: The description of this StackEvents.
        :type: str
        """  # noqa: E501
        self._description = description

    @property
    def sources(self):
        """Get the sources of this StackEvents.

        :return: The sources of this StackEvents.
        :rtype: list[str]
        """  # noqa: E501
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Set the sources of this StackEvents.

        :param sources: The sources of this StackEvents.
        :type: list[str]
        """  # noqa: E501
        self._sources = sources

    @property
    def resources(self):
        """Get the resources of this StackEvents.

        :return: The resources of this StackEvents.
        :rtype: list[StackResources]
        """  # noqa: E501
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Set the resources of this StackEvents.

        :param resources: The resources of this StackEvents.
        :type: list[StackResources]
        """  # noqa: E501
        self._resources = resources

    @property
    def urls(self):
        """Get the urls of this StackEvents.

        :return: The urls of this StackEvents.
        :rtype: list[str]
        """  # noqa: E501
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Set the urls of this StackEvents.

        :param urls: The urls of this StackEvents.
        :type: list[str]
        """  # noqa: E501
        self._urls = urls

    @property
    def updated_at(self):
        """Get the updated_at of this StackEvents.

        :return: The updated_at of this StackEvents.
        :rtype: datetime
        """  # noqa: E501
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Set the updated_at of this StackEvents.

        :param updated_at: The updated_at of this StackEvents.
        :type: datetime
        """  # noqa: E501
        self._updated_at = updated_at

    def to_dict(self):
        """Return the model properties as a dict."""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Return the string representation of the model."""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`."""
        return self.to_str()

    def __eq__(self, other):
        """Return true if both objects are equal."""
        if not isinstance(other, StackEvents):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Return true if both objects are not equal."""
        return not self == other
